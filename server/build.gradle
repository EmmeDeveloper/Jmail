plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'io.freefair.lombok' version '6.5.1'
    id 'org.openjfx.javafxplugin' version '0.0.7'
    id "com.diffplug.spotless" version "6.11.0"
}

version = '30L'

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    implementation 'com.google.guava:guava:30.1.1-jre'

    implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.3.0-alpha13'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.3.0-alpha13'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.0.0-alpha7'

    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.14.0'

    implementation('org.fxmisc.richtext:richtextfx:0.10.9') {
        because 'syntax highlighting of logs'
    }

    implementation('com.github.eduardz1:custom_window:181a04351f') {
        because 'customization of Windows 11 window, no effect on other OS'
    }

    implementation project(':lib')
}

application {
    mainClass = 'jmail.server.Main'
}

javafx {
    version = "17"
    modules = [
        'javafx.controls',
        'javafx.fxml'
    ]
}

tasks.named('test') {
    useJUnitPlatform()
}

spotless {
    java {
        importOrder() // Use the default importOrder configuration
        removeUnusedImports()
        googleJavaFormat()
        formatAnnotations()
    }

    groovyGradle {
        target '*.gradle', 'gradle/**/*.gradle'
        greclipse()
        indentWithSpaces()
    }

    format 'css', {
        target 'src/**/*.css'
        prettier()
    }

    format 'xml', {
        target 'src/**/*.xml', 'src/**/*.fxml'
        prettier(['prettier': '2.8.1', '@prettier/plugin-xml': '2.2.0']).config(['parser': 'xml', 'tabWidth': 4])
    }
}

tasks.register('installLocalGitHook', Copy) {
    from rootProject.file('scripts/pre-commit')
    into rootProject.file('.git/hooks')
    fileMode 0775

    from rootProject.file('scripts/post-commit')
    into rootProject.file('.git/hooks')
    fileMode 0775
}

build.dependsOn = [
    'spotlessApply',
    'installLocalGitHook'
]
